package com.blackducksoftware.integration.jira.hub;

import java.util.List;
import java.util.UUID;

import org.apache.log4j.Logger;

import com.atlassian.jira.issue.Issue;
import com.blackducksoftware.integration.jira.HubJiraLogger;
import com.blackducksoftware.integration.jira.hub.model.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.jira.hub.property.IssueProperties;
import com.blackducksoftware.integration.jira.hub.property.VulnerabilityIssueProperties;
import com.blackducksoftware.integration.jira.issue.HubEventType;

public class VulnerabilityEvent extends HubEvent {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	private final List<VulnerabilitySourceQualifiedId> vulns;

	public VulnerabilityEvent(final String hubProjectName, final String hubProjectVersion,
			final String hubComponentName, final String hubComponentVersion,
			final UUID hubProjectVersionId, final UUID hubComponentId,
			final UUID hubComponentVersionId, final String jiraUserName,
			final String jiraIssueTypeId, final Long jiraProjectId, final String jiraProjectName,
			final HubEventType eventType, final List<VulnerabilitySourceQualifiedId> vulns) {

		super(hubProjectName, hubProjectVersion, hubComponentName, hubComponentVersion, hubProjectVersionId,
				hubComponentId, hubComponentVersionId, jiraUserName, jiraIssueTypeId, jiraProjectId, jiraProjectName,
				eventType);
		this.vulns = vulns;
	}

	@Override
	public String getUniquePropertyKey() {
		final StringBuilder keyBuilder = new StringBuilder();
		keyBuilder.append("type=vulnerability.projectId=");
		keyBuilder.append(getJiraProjectId().toString());
		keyBuilder.append(".projectVersionId=");
		keyBuilder.append(getHubProjectVersionId().toString());
		keyBuilder.append(".componentId=");
		keyBuilder.append(getHubComponentId().toString());

		if (getHubComponentVersionId() != null) {
			keyBuilder.append(".componentVersionId=");
			keyBuilder.append(getHubComponentVersionId().toString());
		}
		final String key = keyBuilder.toString();
		logger.debug("property key: " + key);
		return key;
	}


	@Override
	public String toString() {
		return "VulnerabilityEvent [vulns=" + vulns + ", getHubProjectName()=" + getHubProjectName()
				+ ", getHubProjectVersion()=" + getHubProjectVersion() + ", getHubComponentName()="
				+ getHubComponentName() + ", getHubComponentVersion()=" + getHubComponentVersion()
				+ ", getHubProjectVersionId()=" + getHubProjectVersionId() + ", getHubComponentId()="
				+ getHubComponentId() + ", getHubComponentVersionId()=" + getHubComponentVersionId()
				+ ", getJiraUserName()=" + getJiraUserName() + ", getJiraIssueTypeId()=" + getJiraIssueTypeId()
				+ ", getJiraProjectId()=" + getJiraProjectId() + ", getJiraProjectName()=" + getJiraProjectName()
				+ ", getEventType()=" + getEventType() + "]";
	}

	@Override
	public String getIssueSummary() {
		final StringBuilder issueSummary = new StringBuilder();
		issueSummary.append("Black Duck Hub has detected a vulnerability status change on Hub Project '");
		issueSummary.append(getHubProjectName());
		issueSummary.append("' / '");
		issueSummary.append(getHubProjectVersion());
		issueSummary.append("', component '");
		issueSummary.append(getHubComponentName());
		issueSummary.append("' / '");
		issueSummary.append(getHubComponentVersion());
		issueSummary.append("'");
		return issueSummary.toString();
	}

	@Override
	public String getIssueDescription() {
		final StringBuilder issueDescription = new StringBuilder();
		issueDescription.append("The Black Duck Hub has detected a vulnerability status change on Hub Project '");
		issueDescription.append(getHubProjectName());
		issueDescription.append("', component '");
		issueDescription.append(getHubComponentName());
		issueDescription.append("' / '");
		issueDescription.append(getHubComponentVersion());
		issueDescription.append("'.");
		issueDescription.append(" Vulnerabilities added: ");
		for (final VulnerabilitySourceQualifiedId vuln : vulns) {
			// TODO leaves trailing comma
			issueDescription.append("(source: " + vuln.getSource() + "): " + vuln.getId() + ", ");
		}
		return issueDescription.toString();
	}

	@Override
	public VulnerabilityIssueProperties createIssuePropertiesFromJson(final String json) {
		return gson.fromJson(json, VulnerabilityIssueProperties.class);
	}

	@Override
	public IssueProperties createIssueProperties(final Issue issue) {
		final IssueProperties properties = new VulnerabilityIssueProperties(getHubProjectName(),
				getHubProjectVersion(), getHubComponentName(), getHubComponentVersion(), issue.getId());
		return properties;
	}
}
