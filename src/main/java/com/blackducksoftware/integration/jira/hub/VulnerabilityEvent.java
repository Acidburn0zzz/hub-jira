package com.blackducksoftware.integration.jira.hub;

import java.util.UUID;

import com.atlassian.jira.issue.Issue;
import com.blackducksoftware.integration.jira.hub.property.IssueProperties;
import com.blackducksoftware.integration.jira.hub.property.VulnerabilityIssueProperties;
import com.blackducksoftware.integration.jira.issue.HubEventType;

public class VulnerabilityEvent extends HubEvent {
	// TODO these may have to change
	private final String vulnerabilitySource;
	private final String vulnerabilityId;

	public VulnerabilityEvent(final String hubProjectName, final String hubProjectVersion,
			final String hubComponentName, final String hubComponentVersion,
			final UUID hubProjectVersionId, final UUID hubComponentId,
			final UUID hubComponentVersionId, final String jiraUserName,
			final String jiraIssueTypeId, final Long jiraProjectId, final String jiraProjectName,
			final HubEventType eventType, final String vulnerabilitySource, final String vulnerabilityId) {

		super(hubProjectName, hubProjectVersion, hubComponentName, hubComponentVersion, hubProjectVersionId,
				hubComponentId, hubComponentVersionId, jiraUserName, jiraIssueTypeId, jiraProjectId, jiraProjectName,
				eventType);
		this.vulnerabilitySource = vulnerabilitySource;
		this.vulnerabilityId = vulnerabilityId;
	}

	public String getVulnerabilitySource() {
		return vulnerabilitySource;
	}

	public String getVulnerabilityId() {
		return vulnerabilityId;
	}


	@Override
	public String getUniquePropertyKey() {
		final StringBuilder keyBuilder = new StringBuilder();
		keyBuilder.append(getJiraProjectId().toString());
		keyBuilder.append(".");
		keyBuilder.append(getHubProjectVersionId().toString());
		keyBuilder.append(".");
		keyBuilder.append(getHubComponentId().toString());
		keyBuilder.append(".");
		if (getHubComponentVersionId() != null) {
			keyBuilder.append(getHubComponentVersionId().toString());
			keyBuilder.append(".");
		}
		// TODO: when hub provides links, this may have to change
		keyBuilder.append(vulnerabilitySource);
		keyBuilder.append(".");
		keyBuilder.append(vulnerabilityId);
		return keyBuilder.toString();
	}

	@Override
	public String toString() {
		return "FilteredNotificationResultVulnerability [vulnerabilitySource=" + vulnerabilitySource
				+ ", vulnerabilityId=" + vulnerabilityId + ", getHubProjectName()=" + getHubProjectName()
				+ ", getHubProjectVersion()=" + getHubProjectVersion() + ", getHubComponentName()="
				+ getHubComponentName() + ", getHubComponentVersion()=" + getHubComponentVersion()
				+ ", getHubProjectVersionId()=" + getHubProjectVersionId() + ", getHubComponentId()="
				+ getHubComponentId() + ", getHubComponentVersionId()=" + getHubComponentVersionId()
				+ ", getJiraUserName()=" + getJiraUserName() + ", getJiraIssueTypeId()=" + getJiraIssueTypeId()
				+ ", getJiraProjectId()=" + getJiraProjectId() + ", getJiraProjectName()=" + getJiraProjectName()
				+ ", getEventType()=" + getEventType() + "]";
	}

	@Override
	public String getIssueSummary() {
		final StringBuilder issueSummary = new StringBuilder();
		issueSummary.append("Black Duck ");
		issueSummary.append(getEventType().getDisplayName());
		issueSummary.append(" detected on Hub Project '");
		issueSummary.append(getHubProjectName());
		issueSummary.append("' / '");
		issueSummary.append(getHubProjectVersion());
		issueSummary.append("', component '");
		issueSummary.append(getHubComponentName());
		issueSummary.append("' / '");
		issueSummary.append(getHubComponentVersion());
		issueSummary.append("'");
		issueSummary.append(": " + getVulnerabilitySource() + ":" + getVulnerabilityId());
		return issueSummary.toString();
	}

	@Override
	public String getIssueDescription() {
		final StringBuilder issueDescription = new StringBuilder();
		issueDescription.append("The Black Duck Hub has detected a ");
		issueDescription.append(getEventType().getDisplayName());
		issueDescription.append(" on Hub Project '");
		issueDescription.append(getHubProjectName());
		issueDescription.append("', component '");
		issueDescription.append(getHubComponentName());
		issueDescription.append("' / '");
		issueDescription.append(getHubComponentVersion());
		issueDescription.append("'.");
		issueDescription.append(" Vulnerability added (source: " + getVulnerabilitySource() + "): "
				+ getVulnerabilityId());
		return issueDescription.toString();
	}

	@Override
	public VulnerabilityIssueProperties createIssuePropertiesFromJson(final String json) {
		return gson.fromJson(json, VulnerabilityIssueProperties.class);
	}

	@Override
	public IssueProperties createIssueProperties(final Issue issue) {
		final IssueProperties properties = new VulnerabilityIssueProperties(getHubProjectName(),
				getHubProjectVersion(), getHubComponentName(), getHubComponentVersion(), issue.getId(),
				getVulnerabilitySource(), getVulnerabilityId());
		return properties;
	}
}
