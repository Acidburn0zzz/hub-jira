package com.blackducksoftware.integration.jira.hub.vulnerability;

import java.util.List;
import java.util.UUID;

import org.apache.log4j.Logger;

import com.blackducksoftware.integration.hub.component.api.ComponentVersion;
import com.blackducksoftware.integration.hub.component.api.ComponentVersionStatus;
import com.blackducksoftware.integration.hub.exception.MissingUUIDException;
import com.blackducksoftware.integration.hub.exception.UnexpectedHubResponseException;
import com.blackducksoftware.integration.hub.notification.NotificationService;
import com.blackducksoftware.integration.hub.notification.NotificationServiceException;
import com.blackducksoftware.integration.hub.notification.api.NotificationItem;
import com.blackducksoftware.integration.hub.notification.api.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.notification.api.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.project.api.ProjectVersion;
import com.blackducksoftware.integration.hub.version.api.ReleaseItem;
import com.blackducksoftware.integration.jira.HubJiraLogger;
import com.blackducksoftware.integration.jira.config.HubProjectMappings;
import com.blackducksoftware.integration.jira.config.JiraProject;
import com.blackducksoftware.integration.jira.hub.HubEvent;
import com.blackducksoftware.integration.jira.hub.HubEvents;
import com.blackducksoftware.integration.jira.hub.JiraContext;
import com.blackducksoftware.integration.jira.hub.NotificationToEventConverter;
import com.blackducksoftware.integration.jira.hub.VulnerabilityEvent;
import com.blackducksoftware.integration.jira.issue.HubEventType;
import com.blackducksoftware.integration.jira.issue.JiraServices;

public class VulnerabilityNotificationConverter extends NotificationToEventConverter {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	public static final String PROJECT_LINK = "project";
	private final HubProjectMappings mappings;
	private final NotificationService hubNotificationService;


	public VulnerabilityNotificationConverter(final HubProjectMappings mappings,
			final JiraServices jiraServices,
			final JiraContext jiraContext,
			final NotificationService hubNotificationService) {
		super(hubNotificationService, jiraServices, jiraContext);
		this.mappings = mappings;
		this.hubNotificationService = hubNotificationService;
	}

	@Override
	public HubEvents generateEvents(final NotificationItem notif) {
		final HubEvents allEvents = new HubEvents();
		final VulnerabilityNotificationItem vulnerabilityNotif = (VulnerabilityNotificationItem) notif;
		logger.debug("vulnerabilityNotif: " + vulnerabilityNotif);
		logger.info("This vulnerability notification affects "
				+ vulnerabilityNotif.getContent().getAffectedProjectVersions().size() + " project versions");
		final VulnerabilityNotificationContent vulnerabilityNotificationContent = vulnerabilityNotif.getContent();

		final String componentName = vulnerabilityNotif.getContent().getComponentName();
		final String componentVersionName = vulnerabilityNotif.getContent().getVersionName();
		final HubEventType eventType;
		String projectName;
		String projectVersionName;
		final List<ComponentVersionStatus> compVerStatuses;
		ReleaseItem notifHubProjectReleaseItem;
		for (final ProjectVersion projectVersion : vulnerabilityNotif.getContent().getAffectedProjectVersions()) {
			projectName = projectVersion.getProjectName();
			projectVersionName = projectVersion.getProjectVersionName();
			final String projectVersionLink = projectVersion.getProjectVersionLink();

			try {
				notifHubProjectReleaseItem = getHubNotificationService().getProjectReleaseItemFromProjectReleaseUrl(
						projectVersionLink);
			} catch (NotificationServiceException | UnexpectedHubResponseException e) {
				logger.error(e);
				continue;
			}


			try {
				final HubEvents events = generateEvents(projectName, projectVersionName, projectVersionLink,
						componentName, componentVersionName, vulnerabilityNotificationContent,
						notifHubProjectReleaseItem);
				allEvents.addAllEvents(events);
			} catch (final NotificationServiceException e) {
				logger.error(e);
			}
		}

		return allEvents;
	}

	private HubEvents generateEvents(final String projectName, final String projectVersionName,
			final String projectVersionLink, final String componentName, final String componentVersionName,
			final VulnerabilityNotificationContent vulnerabilityNotificationContent,
			final ReleaseItem notifHubProjectReleaseItem) throws NotificationServiceException {
		final HubEvents notifResults = new HubEvents();

		String hubProjectUrl;
		try {
			hubProjectUrl = hubNotificationService.getProjectUrlFromProjectVersionUrl(projectVersionLink);
		} catch (NotificationServiceException | UnexpectedHubResponseException e) {
			final String msg = "Error getting project URL from project version URL: " + projectVersionLink + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new NotificationServiceException(msg, e);
		}

		logger.debug("Getting JIRA project mapped to Hub project: " + projectName + " / " + projectVersionName);
		final List<JiraProject> mappingJiraProjects = mappings.getJiraProjects(hubProjectUrl);
		logger.debug("There are " + mappingJiraProjects.size() + " JIRA projects mapped to this Hub project");
		for (final JiraProject mappingJiraProject : mappingJiraProjects) {
			logger.debug("JIRA Project: " + mappingJiraProject);
			if (mappingJiraProject == null) {
				logger.info("Hub project " + projectName + " is not one of the configured/mapped projects; Skipping it");
				return notifResults;
			}

			final JiraProject jiraProject;
			try {
				jiraProject = getJiraProject(mappingJiraProject.getProjectId());
			} catch (final NotificationServiceException e) {
				logger.warn("Mapped project '" + mappingJiraProject.getProjectName() + "' with ID "
						+ mappingJiraProject.getProjectId() + " not found in JIRA; skipping this notification");
				continue;
			}

			final HubEvents oneProjectsResults = handleNotificationPerJiraProject(projectName,
					projectVersionName, notifHubProjectReleaseItem, componentName, componentVersionName,
					vulnerabilityNotificationContent,
					jiraProject);
			if (oneProjectsResults != null) {
				notifResults.addAllEvents(oneProjectsResults);
			}
		}


		return notifResults;
	}



	private HubEvents handleNotificationPerJiraProject(final String projectName,
			final String projectVersionName, final ReleaseItem notifHubProjectReleaseItem, final String componentName,
			final String componentVersionName, final VulnerabilityNotificationContent vulnerabilityNotificationContent,
			final JiraProject jiraProject) throws NotificationServiceException {

		final HubEvents notifResults = new HubEvents();

		final String componentVersionUrl = vulnerabilityNotificationContent.getComponentVersionLink();
		ComponentVersion componentVersion = null;

		try {
			componentVersion = hubNotificationService.getComponentVersion(componentVersionUrl);
		} catch (final NotificationServiceException e) {
			logger.error("Error getting componentVersion from URL: " + componentVersionUrl + ": " + e.getMessage());
			throw e;
		}


		UUID versionId;
		final UUID componentId;
		final UUID componentVersionId;
		final UUID ruleId;

		try {
			versionId = notifHubProjectReleaseItem.getVersionId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting version ID from Project Release: " + notifHubProjectReleaseItem + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new NotificationServiceException(msg, e);
		}

		try {
			componentId = componentVersion.getComponentId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting component ID from component version: " + componentVersion + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new NotificationServiceException(msg, e);
		}
		try {
			componentVersionId = componentVersion.getVersionId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting component version ID from component version: " + componentVersion + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new NotificationServiceException(msg, e);
		}

		final HubEventType eventType = HubEventType.VULNERABILITY_STATUS_CHANGE;

		final HubEvent event = new VulnerabilityEvent(projectName,
				projectVersionName, componentName, componentVersionName, versionId, componentId,
				componentVersionId, getJiraContext().getJiraUser().getName(), jiraProject.getIssueTypeId(),
				jiraProject.getProjectId(),
				jiraProject.getProjectName(), eventType, vulnerabilityNotificationContent.getNewVulnerabilityIds(),
				vulnerabilityNotificationContent.getUpdatedVulnerabilityIds(),
				vulnerabilityNotificationContent.getDeletedVulnerabilityIds());

		notifResults.addVulnerabilityEvent(event);

		return notifResults;
	}
}
