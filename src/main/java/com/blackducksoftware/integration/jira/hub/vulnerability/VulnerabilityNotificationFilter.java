package com.blackducksoftware.integration.jira.hub.vulnerability;

import java.util.List;
import java.util.UUID;

import org.apache.log4j.Logger;

import com.blackducksoftware.integration.hub.exception.MissingUUIDException;
import com.blackducksoftware.integration.hub.exception.UnexpectedHubResponseException;
import com.blackducksoftware.integration.hub.version.api.ReleaseItem;
import com.blackducksoftware.integration.jira.HubJiraLogger;
import com.blackducksoftware.integration.jira.config.HubProjectMappings;
import com.blackducksoftware.integration.jira.config.JiraProject;
import com.blackducksoftware.integration.jira.hub.FilteredNotificationResult;
import com.blackducksoftware.integration.jira.hub.FilteredNotificationResultVulnerability;
import com.blackducksoftware.integration.jira.hub.FilteredNotificationResults;
import com.blackducksoftware.integration.jira.hub.HubNotificationService;
import com.blackducksoftware.integration.jira.hub.HubNotificationServiceException;
import com.blackducksoftware.integration.jira.hub.NotificationFilter;
import com.blackducksoftware.integration.jira.hub.TicketGeneratorInfo;
import com.blackducksoftware.integration.jira.hub.model.component.ComponentVersion;
import com.blackducksoftware.integration.jira.hub.model.notification.NotificationItem;
import com.blackducksoftware.integration.jira.hub.model.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.jira.hub.model.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.jira.issue.EventType;

public class VulnerabilityNotificationFilter extends NotificationFilter {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	public static final String PROJECT_LINK = "project";
	private final HubProjectMappings mappings;
	private final TicketGeneratorInfo ticketGenInfo;
	private final List<String> linksOfRulesToMonitor;
	private final HubNotificationService hubNotificationService;


	public VulnerabilityNotificationFilter(final HubProjectMappings mappings,
			final TicketGeneratorInfo ticketGenInfo, final List<String> linksOfRulesToMonitor,
			final HubNotificationService hubNotificationService) {
		this.mappings = mappings;
		this.ticketGenInfo = ticketGenInfo;
		this.linksOfRulesToMonitor = linksOfRulesToMonitor;
		this.hubNotificationService = hubNotificationService;
	}

	// TODO make this obsolete, replaced by handleNotification(final
	// NotificationItem notif)
	public FilteredNotificationResults handleNotification(final String projectName, final String projectVersionName,
			final String projectVersionLink, final String componentName, final String componentVersionName,
			final VulnerabilityNotificationContent vulnerabilityNotificationContent,
			final ReleaseItem notifHubProjectReleaseItem) throws HubNotificationServiceException {
		final FilteredNotificationResults notifResults = new FilteredNotificationResults();

		String hubProjectUrl;
		try {
			hubProjectUrl = hubNotificationService.getProjectUrlFromProjectVersionUrl(projectVersionLink);
		} catch (HubNotificationServiceException | UnexpectedHubResponseException e) {
			final String msg = "Error getting project URL from project version URL: " + projectVersionLink + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new HubNotificationServiceException(msg, e);
		}

		logger.debug("Getting JIRA project mapped to Hub project: " + projectName + " / " + projectVersionName);
		final JiraProject jiraProject = mappings.getJiraProject(hubProjectUrl);
		logger.debug("JIRA Project: " + jiraProject);

		if (jiraProject == null) {
			logger.info("Hub project " + projectName + " is not one of the configured/mapped projects; Skipping it");
			return notifResults;
		}

		final FilteredNotificationResults oneProjectsResults = handleNotificationPerJiraProject(projectName,
				projectVersionName, notifHubProjectReleaseItem, componentName, componentVersionName,
				vulnerabilityNotificationContent, jiraProject);
		if (oneProjectsResults != null) {
			notifResults.addAllResults(oneProjectsResults);
		}


		return notifResults;
	}

	private FilteredNotificationResults handleNotificationPerJiraProject(final String projectName,
			final String projectVersionName, final ReleaseItem notifHubProjectReleaseItem, final String componentName,
			final String componentVersionName, final VulnerabilityNotificationContent vulnerabilityNotificationContent,
			final JiraProject jiraProject) throws HubNotificationServiceException {

		final FilteredNotificationResults notifResults = new FilteredNotificationResults();

		// TODO shouldn't this happen earlier? It happens in
		// PolicyNotificationFilter too
		// if ((linksOfRulesToMonitor == null) || (linksOfRulesToMonitor.size()
		// == 0)) {
		// logger.warn("No rules-to-monitor provided, skipping policy notifications.");
		// return null;
		// }

		final String componentVersionUrl = vulnerabilityNotificationContent.getComponentVersionLink();
		ComponentVersion componentVersion = null;

		try {
			componentVersion = hubNotificationService.getComponentVersion(componentVersionUrl);
		} catch (final HubNotificationServiceException e) {
			logger.error("Error getting componentVersion from URL: " + componentVersionUrl + ": " + e.getMessage());
			throw e;
		}


		UUID versionId;
		final UUID componentId;
		final UUID componentVersionId;
		final UUID ruleId;

		try {
			versionId = notifHubProjectReleaseItem.getVersionId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting version ID from Project Release: " + notifHubProjectReleaseItem + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new HubNotificationServiceException(msg, e);
		}

		try {
			componentId = componentVersion.getComponentId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting component ID from component version: " + componentVersion + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new HubNotificationServiceException(msg, e);
		}
		try {
			componentVersionId = componentVersion.getVersionId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting component version ID from component version: " + componentVersion + ": "
					+ e.getMessage();
			logger.error(msg);
			throw new HubNotificationServiceException(msg, e);
		}

		// TODO: we'll have to do this for deletes and updates too
		for (final VulnerabilitySourceQualifiedId vuln : vulnerabilityNotificationContent.getNewVulnerabilityIds()) {
			final EventType eventType = EventType.VULNERABILITY_ADD;
			final String vulnerableSource = vuln.getSource();
			final String vulnerableId = vuln.getId();

			final FilteredNotificationResult result = new FilteredNotificationResultVulnerability(projectName,
					projectVersionName, componentName, componentVersionName, versionId, componentId,
					componentVersionId, getTicketGenInfo().getJiraUser().getName(), jiraProject.getIssueTypeId(),
					jiraProject.getProjectId(), jiraProject.getProjectName(), eventType, vulnerableSource, vulnerableId);

			// TODO: too broad a bucket?
			notifResults.addVulnerabilityResult(result);
		}



		// if (result.getEventType() == EventType.POLICY_VIOLATION) {
		// notifResults.addPolicyViolationResult(result);
		// } else if (result.getEventType() == EventType.POLICY_OVERRIDE) {
		// notifResults.addPolicyViolationOverrideResult(result);
		// }

		return notifResults;
	}

	private TicketGeneratorInfo getTicketGenInfo() {
		return ticketGenInfo;
	}

	@Override
	public FilteredNotificationResults handleNotification(final NotificationItem notif) {
		// TODO Auto-generated method stub
		return null;
	}
}
