/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.jira.task.conversion.output;

import java.util.List;

import org.apache.log4j.Logger;

import com.atlassian.jira.issue.Issue;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.MissingUUIDException;
import com.blackducksoftware.integration.jira.common.HubJiraConstants;
import com.blackducksoftware.integration.jira.common.HubJiraLogger;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class VulnerabilityEvent extends HubEvent<VulnerabilityContentItem> {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	private final VulnerabilityContentItem vulnerabilityContentItem;

	public VulnerabilityEvent(final String jiraUserName, final String jiraUserId, final String issueAssigneeId,
			final String jiraIssueTypeId, final Long jiraProjectId, final String jiraProjectName,
			final VulnerabilityContentItem vulnerabilityContentItem, final HubEventAction eventAction) {
		super(eventAction, jiraUserName, jiraUserId, issueAssigneeId, jiraIssueTypeId, jiraProjectId,
				jiraProjectName, vulnerabilityContentItem);
		this.vulnerabilityContentItem = vulnerabilityContentItem;
	}

	public VulnerabilityContentItem getVulnerabilityContentItem() {
		return vulnerabilityContentItem;
	}


	@Override
	public String getUniquePropertyKey() throws MissingUUIDException {
		final StringBuilder keyBuilder = new StringBuilder();
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_ISSUE_TYPE_NAME);
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_ISSUE_TYPE_VALUE_VULNERABILITY);
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_JIRA_PROJECT_ID_NAME);
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
		keyBuilder.append(getJiraProjectId().toString());
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_PROJECT_VERSION_REL_URL_HASHED_NAME);
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
		keyBuilder.append(String.valueOf(getVulnerabilityContentItem().getProjectVersion().getProjectVersionLinkRel()
				.hashCode()));
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_COMPONENT_VERSION_REL_URL_HASHED_NAME);
		keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
		keyBuilder.append(String.valueOf(getVulnerabilityContentItem().getComponentVersionLinkRel().hashCode()));

		final String key = keyBuilder.toString();
		logger.debug("property key: " + key);
		return key;
	}

	@Override
	public String toString() {
		final StringBuilder builder = new StringBuilder();
		builder.append("VulnerabilityEvent [vulnerabilityContentItem=");
		builder.append(vulnerabilityContentItem);
		builder.append(", getJiraUserName()=");
		builder.append(getJiraUserName());
		builder.append(", getJiraIssueTypeId()=");
		builder.append(getJiraIssueTypeId());
		builder.append(", getJiraProjectId()=");
		builder.append(getJiraProjectId());
		builder.append(", getJiraProjectName()=");
		builder.append(getJiraProjectName());
		builder.append("]");
		return builder.toString();
	}

	@Override
	public String getIssueSummary() {
		final StringBuilder issueSummary = new StringBuilder();
		issueSummary.append("Black Duck vulnerability status changes on Hub Project '");
		issueSummary.append(getVulnerabilityContentItem().getProjectVersion().getProjectName());
		issueSummary.append("' / '");
		issueSummary.append(getVulnerabilityContentItem().getProjectVersion().getProjectVersionName());
		issueSummary.append("', component '");
		issueSummary.append(getVulnerabilityContentItem().getComponentName());
		issueSummary.append("' / '");
		issueSummary.append(getVulnerabilityContentItem().getComponentVersion());
		issueSummary.append("'");
		return issueSummary.toString();
	}

	@Override
	public String getIssueDescription() {
		final StringBuilder issueDescription = new StringBuilder();
		issueDescription.append("This issue tracks vulnerability status changes on Hub Project '");
		issueDescription.append(getVulnerabilityContentItem().getProjectVersion().getProjectName());
		issueDescription.append("' / '");
		issueDescription.append(getVulnerabilityContentItem().getProjectVersion().getProjectVersionName());
		issueDescription.append("', component '");
		issueDescription.append(getVulnerabilityContentItem().getComponentName());
		issueDescription.append("' / '");
		issueDescription.append(getVulnerabilityContentItem().getComponentVersion());
		issueDescription.append("'. See comments for details.");
		return issueDescription.toString();
	}

	@Override
	public String getComment() {
		final StringBuilder commentText = new StringBuilder();
		commentText.append("(Black Duck Hub JIRA plugin-generated comment)\n");
		generateVulnerabilitiesCommentText(commentText, getVulnerabilityContentItem().getAddedVulnList(), "added");
		generateVulnerabilitiesCommentText(commentText, getVulnerabilityContentItem().getUpdatedVulnList(), "updated");
		generateVulnerabilitiesCommentText(commentText, getVulnerabilityContentItem().getDeletedVulnList(), "deleted");
		return commentText.toString();
	}

	private void generateVulnerabilitiesCommentText(final StringBuilder commentText,
			final List<VulnerabilitySourceQualifiedId> vulns, final String verb) {
		commentText.append("Vulnerabilities " + verb + ": ");
		int index = 0;
		if (vulns != null && !vulns.isEmpty()) {
			for (final VulnerabilitySourceQualifiedId vuln : vulns) {
				commentText.append(vuln.getVulnerabilityId() + " (" + vuln.getSource() + ")");
				if ((index + 1) < vulns.size()) {
					commentText.append(", ");
				}
				index++;
			}
		} else {
			commentText.append("None");
		}
		commentText.append("\n");
	}

	@Override
	public VulnerabilityIssueProperties createIssuePropertiesFromJson(final String json) {
		final Gson gson = new GsonBuilder().create();
		return gson.fromJson(json, VulnerabilityIssueProperties.class);
	}

	@Override
	public IssueProperties createIssueProperties(final Issue issue) {
		final IssueProperties properties = new VulnerabilityIssueProperties(
				getVulnerabilityContentItem().getProjectVersion().getProjectName(),
				getVulnerabilityContentItem().getProjectVersion().getProjectVersionName(),
				getVulnerabilityContentItem().getComponentName(), getVulnerabilityContentItem().getComponentVersion(),
				issue.getId());
		return properties;
	}

	@Override
	public String getReopenComment() {
		return HubJiraConstants.HUB_VULNERABILITY_REOPEN;
	}

	@Override
	public String getResolveComment() {
		return HubJiraConstants.HUB_VULNERABILITY_RESOLVE;
	}
}
