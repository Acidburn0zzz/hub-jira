package com.blackducksoftware.integration.jira.task.conversion.output;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.apache.log4j.Logger;

import com.atlassian.jira.issue.Issue;
import com.blackducksoftware.integration.hub.notification.api.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.jira.common.HubJiraLogger;

public class VulnerabilityEvent extends HubEvent {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	private final List<VulnerabilitySourceQualifiedId> newVulns;
	private final List<VulnerabilitySourceQualifiedId> updatedVulns;
	private final List<VulnerabilitySourceQualifiedId> deletedVulns;

	public VulnerabilityEvent(final String hubProjectName, final String hubProjectVersion,
			final String hubComponentName, final String hubComponentVersion,
			final UUID hubProjectVersionId, final UUID hubComponentId,
			final UUID hubComponentVersionId, final String jiraUserName,
			final String jiraIssueTypeId, final Long jiraProjectId, final String jiraProjectName,
			final HubEventType eventType, final List<VulnerabilitySourceQualifiedId> newVulns,
			final List<VulnerabilitySourceQualifiedId> updatedVulns,
			final List<VulnerabilitySourceQualifiedId> deletedVulns) {

		super(HubEventAction.ADD_COMMENT, hubProjectName, hubProjectVersion, hubComponentName,
				hubComponentVersion, hubProjectVersionId,
				hubComponentId, hubComponentVersionId, jiraUserName, jiraIssueTypeId, jiraProjectId, jiraProjectName,
				eventType);
		this.newVulns = ensureNotNull(newVulns);
		this.updatedVulns = ensureNotNull(updatedVulns);
		this.deletedVulns = ensureNotNull(deletedVulns);
	}

	private List<VulnerabilitySourceQualifiedId> ensureNotNull(final List<VulnerabilitySourceQualifiedId> vulns) {
		if (vulns == null) {
			return new ArrayList<VulnerabilitySourceQualifiedId>();
		}
		return vulns;
	}

	@Override
	public String getUniquePropertyKey() {
		final StringBuilder keyBuilder = new StringBuilder();
		keyBuilder.append("type=vulnerability.projectId=");
		keyBuilder.append(getJiraProjectId().toString());
		keyBuilder.append(".projectVersionId=");
		keyBuilder.append(getHubProjectVersionId().toString());
		keyBuilder.append(".componentId=");
		keyBuilder.append(getHubComponentId().toString());

		if (getHubComponentVersionId() != null) {
			keyBuilder.append(".componentVersionId=");
			keyBuilder.append(getHubComponentVersionId().toString());
		}
		final String key = keyBuilder.toString();
		logger.debug("property key: " + key);
		return key;
	}



	@Override
	public String toString() {
		return "VulnerabilityEvent [logger=" + logger + ", newVulns=" + newVulns + ", updatedVulns=" + updatedVulns
				+ ", deletedVulns=" + deletedVulns + ", getIfExistsAction()=" + getIfExistsAction()
				+ ", getHubProjectName()=" + getHubProjectName() + ", getHubProjectVersion()=" + getHubProjectVersion()
				+ ", getHubComponentName()=" + getHubComponentName() + ", getHubComponentVersion()="
				+ getHubComponentVersion() + ", getHubProjectVersionId()=" + getHubProjectVersionId()
				+ ", getHubComponentId()=" + getHubComponentId() + ", getHubComponentVersionId()="
				+ getHubComponentVersionId() + ", getJiraUserName()=" + getJiraUserName() + ", getJiraIssueTypeId()="
				+ getJiraIssueTypeId() + ", getJiraProjectId()=" + getJiraProjectId() + ", getJiraProjectName()="
				+ getJiraProjectName() + ", getEventType()=" + getEventType() + "]";
	}

	@Override
	public String getIssueSummary() {
		final StringBuilder issueSummary = new StringBuilder();
		issueSummary.append("Black Duck vulnerability status changes on Hub Project '");
		issueSummary.append(getHubProjectName());
		issueSummary.append("' / '");
		issueSummary.append(getHubProjectVersion());
		issueSummary.append("', component '");
		issueSummary.append(getHubComponentName());
		issueSummary.append("' / '");
		issueSummary.append(getHubComponentVersion());
		issueSummary.append("'");
		return issueSummary.toString();
	}

	@Override
	public String getIssueDescription() {
		final StringBuilder issueDescription = new StringBuilder();
		issueDescription.append("This issue tracks vulnerability status changes on Hub Project '");
		issueDescription.append(getHubProjectName());
		issueDescription.append("' / '");
		issueDescription.append(getHubProjectVersion());
		issueDescription.append("', component '");
		issueDescription.append(getHubComponentName());
		issueDescription.append("' / '");
		issueDescription.append(getHubComponentVersion());
		issueDescription.append("'. See comments for details.");
		return issueDescription.toString();
	}

	@Override
	public String getComment() {
		final StringBuilder commentText = new StringBuilder();
		commentText.append("(Black Duck Hub JIRA plugin-generated comment)\n");
		generateVulnerabilitiesCommentText(commentText, newVulns, "added");
		generateVulnerabilitiesCommentText(commentText, updatedVulns, "updated");
		generateVulnerabilitiesCommentText(commentText, deletedVulns, "deleted");
		return commentText.toString();
	}

	private void generateVulnerabilitiesCommentText(final StringBuilder commentText,
			final List<VulnerabilitySourceQualifiedId> vulns, final String verb) {
		commentText.append("Vulnerabilities " + verb + ": ");
		int index = 0;
		for (final VulnerabilitySourceQualifiedId vuln : vulns) {
			commentText.append(vuln.getId() + " (" + vuln.getSource() + ")");
			if ((index + 1) < vulns.size()) {
				commentText.append(", ");
			}
			index++;
		}
		commentText.append("\n");
	}

	@Override
	public VulnerabilityIssueProperties createIssuePropertiesFromJson(final String json) {
		return gson.fromJson(json, VulnerabilityIssueProperties.class);
	}

	@Override
	public IssueProperties createIssueProperties(final Issue issue) {
		final IssueProperties properties = new VulnerabilityIssueProperties(getHubProjectName(),
				getHubProjectVersion(), getHubComponentName(), getHubComponentVersion(), issue.getId());
		return properties;
	}

}
