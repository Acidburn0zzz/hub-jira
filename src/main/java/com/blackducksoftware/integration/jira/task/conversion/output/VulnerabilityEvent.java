/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.jira.task.conversion.output;

import java.util.List;

import org.apache.log4j.Logger;

import com.atlassian.jira.issue.Issue;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.dataservices.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.jira.common.HubJiraLogger;

public class VulnerabilityEvent extends HubEvent {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	private final VulnerabilityContentItem vulnerabilityContentItem;

	public VulnerabilityEvent(final String jiraUserName,
			final String jiraIssueTypeId, final Long jiraProjectId, final String jiraProjectName,
			final VulnerabilityContentItem vulnerabilityContentItem) {
		super(HubEventAction.ADD_COMMENT, jiraUserName, jiraIssueTypeId, jiraProjectId, jiraProjectName);
		this.vulnerabilityContentItem = vulnerabilityContentItem;
	}

	public VulnerabilityContentItem getVulnerabilityContentItem() {
		return vulnerabilityContentItem;
	}

	@Override
	public String getUniquePropertyKey() {
		final StringBuilder keyBuilder = new StringBuilder();
		keyBuilder.append("type=vulnerability.projectId=");
		keyBuilder.append(getJiraProjectId().toString());
		keyBuilder.append(".projectVersionId=");
		keyBuilder.append(getHubProjectVersionId().toString());
		keyBuilder.append(".componentId=");
		keyBuilder.append(getHubComponentId().toString());

		if (getHubComponentVersionId() != null) {
			keyBuilder.append(".componentVersionId=");
			keyBuilder.append(getHubComponentVersionId().toString());
		}
		final String key = keyBuilder.toString();
		logger.debug("property key: " + key);
		return key;
	}



	@Override
	public String toString() {
		return "VulnerabilityEvent [logger=" + logger + ", newVulns=" + newVulns + ", updatedVulns=" + updatedVulns
				+ ", deletedVulns=" + deletedVulns + ", getIfExistsAction()=" + getAction()
				+ ", getHubProjectName()=" + getHubProjectName() + ", getHubProjectVersion()=" + getHubProjectVersion()
				+ ", getHubComponentName()=" + getHubComponentName() + ", getHubComponentVersion()="
				+ getHubComponentVersion() + ", getHubProjectVersionId()=" + getHubProjectVersionId()
				+ ", getHubComponentId()=" + getHubComponentId() + ", getHubComponentVersionId()="
				+ getHubComponentVersionId() + ", getJiraUserName()=" + getJiraUserName() + ", getJiraIssueTypeId()="
				+ getJiraIssueTypeId() + ", getJiraProjectId()=" + getJiraProjectId() + ", getJiraProjectName()="
				+ getJiraProjectName() + ", getEventType()=" + getEventType() + "]";
	}

	@Override
	public String getIssueSummary() {
		final StringBuilder issueSummary = new StringBuilder();
		issueSummary.append("Black Duck vulnerability status changes on Hub Project '");
		issueSummary.append(getHubProjectName());
		issueSummary.append("' / '");
		issueSummary.append(getHubProjectVersion());
		issueSummary.append("', component '");
		issueSummary.append(getHubComponentName());
		issueSummary.append("' / '");
		issueSummary.append(getHubComponentVersion());
		issueSummary.append("'");
		return issueSummary.toString();
	}

	@Override
	public String getIssueDescription() {
		final StringBuilder issueDescription = new StringBuilder();
		issueDescription.append("This issue tracks vulnerability status changes on Hub Project '");
		issueDescription.append(getHubProjectName());
		issueDescription.append("' / '");
		issueDescription.append(getHubProjectVersion());
		issueDescription.append("', component '");
		issueDescription.append(getHubComponentName());
		issueDescription.append("' / '");
		issueDescription.append(getHubComponentVersion());
		issueDescription.append("'. See comments for details.");
		return issueDescription.toString();
	}

	@Override
	public String getComment() {
		final StringBuilder commentText = new StringBuilder();
		commentText.append("(Black Duck Hub JIRA plugin-generated comment)\n");
		generateVulnerabilitiesCommentText(commentText, newVulns, "added");
		generateVulnerabilitiesCommentText(commentText, updatedVulns, "updated");
		generateVulnerabilitiesCommentText(commentText, deletedVulns, "deleted");
		return commentText.toString();
	}

	private void generateVulnerabilitiesCommentText(final StringBuilder commentText,
			final List<VulnerabilitySourceQualifiedId> vulns, final String verb) {
		commentText.append("Vulnerabilities " + verb + ": ");
		int index = 0;
		for (final VulnerabilitySourceQualifiedId vuln : vulns) {
			commentText.append(vuln.getId() + " (" + vuln.getSource() + ")");
			if ((index + 1) < vulns.size()) {
				commentText.append(", ");
			}
			index++;
		}
		commentText.append("\n");
	}

	@Override
	public VulnerabilityIssueProperties createIssuePropertiesFromJson(final String json) {
		return gson.fromJson(json, VulnerabilityIssueProperties.class);
	}

	@Override
	public IssueProperties createIssueProperties(final Issue issue) {
		final IssueProperties properties = new VulnerabilityIssueProperties(getHubProjectName(),
				getHubProjectVersion(), getHubComponentName(), getHubComponentVersion(), issue.getId());
		return properties;
	}

}
