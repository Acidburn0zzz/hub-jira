/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.jira.task.conversion;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.apache.log4j.Logger;

import com.blackducksoftware.integration.hub.api.component.ComponentVersion;
import com.blackducksoftware.integration.hub.api.notification.NotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.api.version.ReleaseItem;
import com.blackducksoftware.integration.hub.exception.MissingUUIDException;
import com.blackducksoftware.integration.hub.exception.NotificationServiceException;
import com.blackducksoftware.integration.hub.exception.UnexpectedHubResponseException;
import com.blackducksoftware.integration.hub.notification.NotificationService;
import com.blackducksoftware.integration.jira.common.HubJiraLogger;
import com.blackducksoftware.integration.jira.common.HubProjectMappings;
import com.blackducksoftware.integration.jira.common.JiraContext;
import com.blackducksoftware.integration.jira.common.JiraProject;
import com.blackducksoftware.integration.jira.task.JiraSettingsService;
import com.blackducksoftware.integration.jira.task.conversion.output.HubEvent;
import com.blackducksoftware.integration.jira.task.conversion.output.HubEventType;
import com.blackducksoftware.integration.jira.task.conversion.output.VulnerabilityEvent;
import com.blackducksoftware.integration.jira.task.issue.JiraServices;

public class VulnerabilityNotificationConverter extends NotificationToEventConverter {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	public static final String PROJECT_LINK = "project";
	private final HubProjectMappings mappings;
	private final NotificationService hubNotificationService;


	public VulnerabilityNotificationConverter(final HubProjectMappings mappings,
			final JiraServices jiraServices,
			final JiraContext jiraContext,
			final NotificationService hubNotificationService, final JiraSettingsService jiraSettingsService) {
		super(hubNotificationService, jiraServices, jiraContext, jiraSettingsService);
		this.mappings = mappings;
		this.hubNotificationService = hubNotificationService;
	}

	@Override
	public List<HubEvent> generateEvents(final NotificationItem notif) {
		final List<HubEvent> allEvents = new ArrayList<>();
		final VulnerabilityNotificationItem vulnerabilityNotif = (VulnerabilityNotificationItem) notif;
		logger.debug("vulnerabilityNotif: " + vulnerabilityNotif);
		logger.info("This vulnerability notification affects "
				+ vulnerabilityNotif.getContent().getAffectedProjectVersions().size() + " project versions");
		final VulnerabilityNotificationContent vulnerabilityNotificationContent = vulnerabilityNotif.getContent();

		final String componentName = vulnerabilityNotif.getContent().getComponentName();
		final String componentVersionName = vulnerabilityNotif.getContent().getVersionName();
		String projectName;
		String projectVersionName;
		ReleaseItem notifHubProjectReleaseItem;
		for (final ProjectVersion projectVersion : vulnerabilityNotif.getContent().getAffectedProjectVersions()) {
			projectName = projectVersion.getProjectName();
			projectVersionName = projectVersion.getProjectVersionName();

			logger.debug("Getting JIRA project(s) mapped to Hub project: " + projectName + " / " + projectVersionName);
			final List<JiraProject> mappingJiraProjects = mappings.getJiraProjects(projectName);
			logger.debug("There are " + mappingJiraProjects.size() + " JIRA projects mapped to this Hub project : "
					+ projectName);
			// get the mapped projects by name before making any Hub calls to
			// prevent forbidden errors
			if(!mappingJiraProjects.isEmpty()){
				final String projectVersionLink = projectVersion.getProjectVersionLink();

				try {
					notifHubProjectReleaseItem = getHubNotificationService().getProjectReleaseItemFromProjectReleaseUrl(
							projectVersionLink);
				} catch (NotificationServiceException | UnexpectedHubResponseException e) {
					logger.error(e);
					getJiraSettingsService().addHubError(e);
					continue;
				}

				try {
					final List<HubEvent> events = generateEvents(projectName, projectVersionName, projectVersionLink,
							componentName, componentVersionName, vulnerabilityNotificationContent,
							notifHubProjectReleaseItem, mappingJiraProjects);
					allEvents.addAll(events);

				} catch (final NotificationServiceException e) {
					logger.error(e);
					getJiraSettingsService().addHubError(e);
				}
			}
		}

		return allEvents;
	}

	private List<HubEvent> generateEvents(final String projectName, final String projectVersionName,
			final String projectVersionLink, final String componentName, final String componentVersionName,
			final VulnerabilityNotificationContent vulnerabilityNotificationContent,
			final ReleaseItem notifHubProjectReleaseItem, final List<JiraProject> mappingJiraProjects) throws NotificationServiceException {
		final List<HubEvent> notifEvents = new ArrayList<>();

		for (final JiraProject mappingJiraProject : mappingJiraProjects) {
			logger.debug("JIRA Project: " + mappingJiraProject);
			if (mappingJiraProject == null) {
				logger.info("Hub project " + projectName + " is not one of the configured/mapped projects; Skipping it");
				return notifEvents;
			}

			final JiraProject jiraProject;
			try {
				jiraProject = getJiraProject(mappingJiraProject.getProjectId());
			} catch (final NotificationServiceException e) {
				logger.warn("Mapped project '" + mappingJiraProject.getProjectName() + "' with ID "
						+ mappingJiraProject.getProjectId() + " not found in JIRA; skipping this notification");
				continue;
			}

			final List<HubEvent> projectEvents = handleNotificationPerJiraProject(projectName,
					projectVersionName, notifHubProjectReleaseItem, componentName, componentVersionName,
					vulnerabilityNotificationContent,
					jiraProject);
			if (projectEvents != null) {
				notifEvents.addAll(projectEvents);
			}
		}

		return notifEvents;
	}



	private List<HubEvent> handleNotificationPerJiraProject(final String projectName,
			final String projectVersionName, final ReleaseItem notifHubProjectReleaseItem, final String componentName,
			final String componentVersionName, final VulnerabilityNotificationContent vulnerabilityNotificationContent,
			final JiraProject jiraProject) throws NotificationServiceException {

		final List<HubEvent> notifEvents = new ArrayList<HubEvent>();

		final String componentVersionUrl = vulnerabilityNotificationContent.getComponentVersionLink();
		ComponentVersion componentVersion = null;

		try {
			componentVersion = hubNotificationService.getComponentVersion(componentVersionUrl);
		} catch (final NotificationServiceException e) {
			logger.error("Error getting componentVersion from URL: " + componentVersionUrl + ": " + e.getMessage());
			throw e;
		}


		UUID versionId;
		final UUID componentId;
		final UUID componentVersionId;

		try {
			versionId = notifHubProjectReleaseItem.getVersionId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting version ID from Project Release: " + notifHubProjectReleaseItem + ": "
					+ e.getMessage();
			throw new NotificationServiceException(msg, e);
		}

		try {
			componentId = componentVersion.getComponentId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting component ID from component version: " + componentVersion + ": "
					+ e.getMessage();
			throw new NotificationServiceException(msg, e);
		}
		try {
			componentVersionId = componentVersion.getVersionId();
		} catch (final MissingUUIDException e) {
			final String msg = "Error getting component version ID from component version: " + componentVersion + ": "
					+ e.getMessage();
			throw new NotificationServiceException(msg, e);
		}

		final HubEventType eventType = HubEventType.VULNERABILITY_STATUS_CHANGE;

		final HubEvent event = new VulnerabilityEvent(projectName,
				projectVersionName, componentName, componentVersionName, versionId, componentId,
				componentVersionId, getJiraContext().getJiraUser().getName(), jiraProject.getIssueTypeId(),
				jiraProject.getProjectId(),
				jiraProject.getProjectName(), eventType, vulnerabilityNotificationContent.getNewVulnerabilityIds(),
				vulnerabilityNotificationContent.getUpdatedVulnerabilityIds(),
				vulnerabilityNotificationContent.getDeletedVulnerabilityIds());

		notifEvents.add(event);

		return notifEvents;
	}
}
