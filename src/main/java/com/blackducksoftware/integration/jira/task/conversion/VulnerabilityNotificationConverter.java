/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.jira.task.conversion;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.blackducksoftware.integration.hub.api.item.MetaService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionItem;
import com.blackducksoftware.integration.hub.api.vulnerablebomcomponent.VulnerableBomComponentItem;
import com.blackducksoftware.integration.hub.api.vulnerablebomcomponent.VulnerableBomComponentRequestService;
import com.blackducksoftware.integration.hub.dataservice.notification.item.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservice.notification.item.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.HubIntegrationException;
import com.blackducksoftware.integration.hub.notification.processor.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.notification.processor.event.NotificationEvent;
import com.blackducksoftware.integration.hub.service.HubRequestService;
import com.blackducksoftware.integration.hub.service.HubServicesFactory;
import com.blackducksoftware.integration.jira.common.HubJiraConstants;
import com.blackducksoftware.integration.jira.common.HubJiraLogger;
import com.blackducksoftware.integration.jira.common.HubProjectMappings;
import com.blackducksoftware.integration.jira.common.HubUrlParser;
import com.blackducksoftware.integration.jira.common.JiraContext;
import com.blackducksoftware.integration.jira.common.JiraProject;
import com.blackducksoftware.integration.jira.common.exception.ConfigurationException;
import com.blackducksoftware.integration.jira.config.HubJiraFieldCopyConfigSerializable;
import com.blackducksoftware.integration.jira.task.JiraSettingsService;
import com.blackducksoftware.integration.jira.task.conversion.output.HubEventAction;
import com.blackducksoftware.integration.jira.task.issue.JiraServices;

public class VulnerabilityNotificationConverter extends NotificationToEventConverter {
    private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));

    private final VulnerableBomComponentRequestService vulnerableBomComponentRestService;

    private final HubRequestService hubRequestService;

    public VulnerabilityNotificationConverter(final HubProjectMappings mappings,
            final HubJiraFieldCopyConfigSerializable fieldCopyConfig,
            final JiraServices jiraServices,
            final JiraContext jiraContext, final JiraSettingsService jiraSettingsService,
            final HubServicesFactory hubServicesFactory, final MetaService metaService)
            throws ConfigurationException {
        super(jiraServices, jiraContext, jiraSettingsService, mappings, HubJiraConstants.HUB_VULNERABILITY_ISSUE, metaService,
                fieldCopyConfig);
        this.vulnerableBomComponentRestService = hubServicesFactory.createVulnerableBomComponentRequestService();
        this.hubRequestService = hubServicesFactory.createHubRequestService();
    }

    @Override
    public List<NotificationEvent> generateEvents(final NotificationContentItem notif) {
        final List<NotificationEvent> notifEvents = new ArrayList<>();
        final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notif;
        logger.debug("vulnerabilityNotif: " + vulnerabilityContentItem);

        logger.debug("Getting JIRA project(s) mapped to Hub project: " + notif.getProjectVersion().getProjectName());
        final List<JiraProject> mappingJiraProjects = getMappings()
                .getJiraProjects(notif.getProjectVersion().getProjectName());
        logger.debug("There are " + mappingJiraProjects.size() + " JIRA projects mapped to this Hub project : "
                + notif.getProjectVersion().getProjectName());
        if (!mappingJiraProjects.isEmpty()) {

            boolean componentVersionExistsInBom = true;
            ProjectVersionItem projectReleaseItem;
            try {
                projectReleaseItem = getProjectVersionItem(vulnerabilityContentItem);
                componentVersionExistsInBom = isComponentVersionHasVulnerabilities(vulnerabilityContentItem, projectReleaseItem);
            } catch (final HubIntegrationException e2) {
                logger.debug("Error getting project version item from vulnerability content item: " + e2.getMessage());
                getJiraSettingsService().addHubError(e2, notif.getProjectVersion().getProjectName(),
                        notif.getProjectVersion().getProjectVersionName(), "",
                        getJiraContext().getJiraUser().getName(), "transitionIssue");
                return null;
            }

            for (final JiraProject jiraProject : mappingJiraProjects) {
                logger.debug("JIRA Project: " + jiraProject);
                try {
                    final NotificationEvent projectEvent = handleNotificationPerJiraProject(vulnerabilityContentItem,
                            jiraProject, componentVersionExistsInBom, projectReleaseItem);
                    if (projectEvent != null) {
                        notifEvents.add(projectEvent);
                    }
                } catch (final Exception e) {
                    logger.error(e);
                    getJiraSettingsService().addHubError(e, notif.getProjectVersion().getProjectName(),
                            notif.getProjectVersion().getProjectVersionName(), jiraProject.getProjectName(),
                            getJiraContext().getJiraUser().getName(), "transitionIssue");
                    continue;
                }
            }
        }
        return notifEvents;
    }

    private String getVulnerableComponentsUrl(ProjectVersionItem projectReleaseItem) throws HubIntegrationException {
        String vulnerableComponentsUrl;
        try {
            vulnerableComponentsUrl = getMetaService().getLink(projectReleaseItem, HubJiraConstants.VULNERABLE_COMPONENTS_LINK_NAME);
        } catch (final Exception e1) {
            final String msg = "Error getting vulnerable-components link from project release item. Unable to determine if this component still has vulnerabilities";
            logger.error(msg);
            throw new HubIntegrationException(msg, e1);
        }
        return vulnerableComponentsUrl;
    }

    private ProjectVersionItem getProjectVersionItem(final VulnerabilityContentItem vulnerabilityContentItem) throws HubIntegrationException {
        ProjectVersionItem projectReleaseItem;

        try {
            projectReleaseItem = hubRequestService.getItem(vulnerabilityContentItem.getProjectVersion()
                    .getUrl(), ProjectVersionItem.class);
        } catch (final HubIntegrationException e) {
            final String msg = "Error getting project release item. Unable to determine if this component still has vulnerabilities. Exception: "
                    + e.getMessage();
            logger.error(msg);
            throw new HubIntegrationException(msg, e);
        }

        return projectReleaseItem;
    }

    private boolean isComponentVersionHasVulnerabilities(final VulnerabilityContentItem vulnerabilityContentItem,
            ProjectVersionItem projectReleaseItem) {
        if (CollectionUtils.isEmpty(vulnerabilityContentItem.getDeletedVulnList())) {
            logger.debug("Since no vulnerabilities were deleted, the component must still have vulnerabilities");
            return true;
        }

        String vulnerableComponentsUrl;
        try {
            vulnerableComponentsUrl = getVulnerableComponentsUrl(projectReleaseItem);
        } catch (final HubIntegrationException e1) {
            logger.debug("Error getting vulnerable-components link from project release item. Unable to determine if this component still has vulnerabilities");
            return true;
        }

        List<VulnerableBomComponentItem> vulnerableBomComponentItems;
        try {
            vulnerableBomComponentItems = vulnerableBomComponentRestService
                    .getVulnerableComponentsMatchingComponentName(vulnerableComponentsUrl,
                            vulnerabilityContentItem.getComponentName());
        } catch (final HubIntegrationException e) {
            logger.error("Error getting vulnerable components. Unable to determine if this component still has vulnerabilities");
            return true;
        }

        logger.debug("vulnerableBomComponentItems.size(): " + vulnerableBomComponentItems.size());
        if (hasVersion(vulnerableBomComponentItems, vulnerabilityContentItem.getComponentVersion())) {
            logger.debug("This component still has vulnerabilities");
            return true;
        } else {
            logger.debug("This component either no longer has vulnerabilities, or is no longer in the BOM");
            return false;
        }
    }

    private boolean hasVersion(final List<VulnerableBomComponentItem> vulnerableBomComponentItems,
            String targetVersionName) {
        if (StringUtils.isEmpty(targetVersionName)) {
            targetVersionName = null;
        }
        for (final VulnerableBomComponentItem vulnerableBomComponentItem : vulnerableBomComponentItems) {
            String currentVersionName = vulnerableBomComponentItem.getComponentVersionName();
            if (StringUtils.isEmpty(currentVersionName)) {
                currentVersionName = null;
            }
            if (currentVersionName == targetVersionName) {
                return true;
            }
        }
        return false;
    }

    private NotificationEvent handleNotificationPerJiraProject(final VulnerabilityContentItem vulnerabilityContentItem,
            final JiraProject jiraProject, final boolean componentVersionExistsInBom, ProjectVersionItem projectReleaseItem)
            throws HubIntegrationException {

        final List<VulnerabilitySourceQualifiedId> addedVulnList = vulnerabilityContentItem.getAddedVulnList();
        final List<VulnerabilitySourceQualifiedId> updatedVulnList = vulnerabilityContentItem
                .getUpdatedVulnList();
        final List<VulnerabilitySourceQualifiedId> deletedVulnList = vulnerabilityContentItem
                .getDeletedVulnList();

        final boolean notificationHasOnlyDeletes = (addedVulnList == null || addedVulnList.isEmpty())
                && (updatedVulnList == null || updatedVulnList.isEmpty())
                && (deletedVulnList != null && !deletedVulnList.isEmpty());

        HubEventAction eventAction = HubEventAction.ADD_COMMENT;
        if (!componentVersionExistsInBom) {
            eventAction = HubEventAction.RESOLVE;
        } else if (notificationHasOnlyDeletes) {
            eventAction = HubEventAction.ADD_COMMENT_IF_EXISTS;
        }

        // TODO shouldn't this get added to event?
        String vulnerableComponentsUrl;
        try {
            vulnerableComponentsUrl = getVulnerableComponentsUrl(projectReleaseItem);
        } catch (final HubIntegrationException e1) {
            logger.debug("Error getting vulnerable-components link from project release item. Unable to determine if this component still has vulnerabilities: "
                    + e1.getMessage());
            vulnerableComponentsUrl = "<error getting vulnerable components URL>";
        }

        Map<String, Object> dataSet = createDataSet(vulnerabilityContentItem, eventAction, getJiraContext(), jiraProject,
                null, HubJiraConstants.HUB_POLICY_VIOLATION_DETECTED_AGAIN_COMMENT,
                HubJiraConstants.HUB_POLICY_VIOLATION_RESOLVE,
                null);

        String key = getUniquePropertyKeyForVulnerabilityIssue(vulnerabilityContentItem, jiraProject.getProjectId());
        final NotificationEvent event = new NotificationEvent(key, NotificationCategoryEnum.VULNERABILITY, dataSet);

        return event;
    }

    private String getUniquePropertyKeyForVulnerabilityIssue(VulnerabilityContentItem notificationContentItem, Long jiraProjectId)
            throws HubIntegrationException {

        final StringBuilder keyBuilder = new StringBuilder();
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_ISSUE_TYPE_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_ISSUE_TYPE_VALUE_VULNERABILITY);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_JIRA_PROJECT_ID_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(jiraProjectId.toString());
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_PROJECT_VERSION_REL_URL_HASHED_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(hashString(HubUrlParser.getRelativeUrl(notificationContentItem.getProjectVersion().getUrl())));
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_COMPONENT_REL_URL_HASHED_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(""); // There is never a component URL
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_HUB_COMPONENT_VERSION_REL_URL_HASHED_NAME);
        keyBuilder.append(HubJiraConstants.ISSUE_PROPERTY_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(hashString(HubUrlParser.getRelativeUrl(notificationContentItem.getComponentVersionUrl())));

        final String key = keyBuilder.toString();

        logger.debug("property key: " + key);
        return key;
    }
}
