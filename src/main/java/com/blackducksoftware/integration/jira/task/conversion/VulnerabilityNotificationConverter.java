/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.jira.task.conversion;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.vulnerableBomComponent.VulnerableBomComponentItem;
import com.blackducksoftware.integration.hub.api.vulnerableBomComponent.VulnerableBomComponentRestService;
import com.blackducksoftware.integration.hub.dataservices.DataServicesFactory;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.BDRestException;
import com.blackducksoftware.integration.hub.exception.MissingUUIDException;
import com.blackducksoftware.integration.hub.exception.NotificationServiceException;
import com.blackducksoftware.integration.jira.common.HubJiraConstants;
import com.blackducksoftware.integration.jira.common.HubJiraLogger;
import com.blackducksoftware.integration.jira.common.HubProjectMappings;
import com.blackducksoftware.integration.jira.common.JiraContext;
import com.blackducksoftware.integration.jira.common.JiraProject;
import com.blackducksoftware.integration.jira.common.exception.ConfigurationException;
import com.blackducksoftware.integration.jira.task.JiraSettingsService;
import com.blackducksoftware.integration.jira.task.conversion.output.HubEvent;
import com.blackducksoftware.integration.jira.task.conversion.output.HubEventAction;
import com.blackducksoftware.integration.jira.task.conversion.output.VulnerabilityEvent;
import com.blackducksoftware.integration.jira.task.issue.JiraServices;

public class VulnerabilityNotificationConverter extends NotificationToEventConverter {
	private final HubJiraLogger logger = new HubJiraLogger(Logger.getLogger(this.getClass().getName()));
	private final DataServicesFactory dataServicesFactory;

	public VulnerabilityNotificationConverter(final HubProjectMappings mappings, final JiraServices jiraServices,
			final JiraContext jiraContext, final JiraSettingsService jiraSettingsService,
			final DataServicesFactory dataServicesFactory)
					throws ConfigurationException {
		super(jiraServices, jiraContext, jiraSettingsService, mappings, HubJiraConstants.HUB_VULNERABILITY_ISSUE);
		this.dataServicesFactory = dataServicesFactory;
	}

	@Override
	public List<HubEvent> generateEvents(final NotificationContentItem notif) {
		final List<HubEvent> notifEvents = new ArrayList<>();
		final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notif;
		logger.debug("vulnerabilityNotif: " + vulnerabilityContentItem);

		logger.debug("Getting JIRA project(s) mapped to Hub project: " + notif.getProjectVersion().getProjectName());
		final List<JiraProject> mappingJiraProjects = getMappings()
				.getJiraProjects(notif.getProjectVersion().getProjectName());
		logger.debug("There are " + mappingJiraProjects.size() + " JIRA projects mapped to this Hub project : "
				+ notif.getProjectVersion().getProjectName());
		if (!mappingJiraProjects.isEmpty()) {

			final boolean componentVersionExistsInBom = isComponentVersionInBom(vulnerabilityContentItem);

			for (final JiraProject jiraProject : mappingJiraProjects) {
				logger.debug("JIRA Project: " + jiraProject);
				try {
					final HubEvent projectEvent = handleNotificationPerJiraProject(vulnerabilityContentItem,
							jiraProject, componentVersionExistsInBom);
					if (projectEvent != null) {
						notifEvents.add(projectEvent);
					}
				} catch (final Exception e) {
					logger.error(e);
					getJiraSettingsService().addHubError(e, notif.getProjectVersion().getProjectName(),
							notif.getProjectVersion().getProjectVersionName(), jiraProject.getProjectName(),
							getJiraContext().getJiraUser().getName(), "transitionIssue");
					return null;
				}
			}
		}
		return notifEvents;
	}

	private boolean isComponentVersionInBom(final VulnerabilityContentItem vulnerabilityContentItem) {
		if (CollectionUtils.isEmpty(vulnerabilityContentItem.getDeletedVulnList())) {
			logger.debug("Since no vulnerabilities were deleted, the component must still have vulnerabilities");
			return true;
		}

		String projectId;
		try {
			projectId = vulnerabilityContentItem.getProjectVersion().getProjectId().toString();
		} catch (final MissingUUIDException e) {
			logger.error("Error getting Project ID. Unable to determine whether this component still has vulnerabilites");
			return true;
		}
		String projectVersionId;
		try {
			projectVersionId = vulnerabilityContentItem.getProjectVersion().getVersionId().toString();
		} catch (final MissingUUIDException e) {
			logger.error("Error getting Project Version ID. Unable to determine if this component still has vulnerabilities");
			return true;
		}
		final String componentName = vulnerabilityContentItem.getComponentName();

		final VulnerableBomComponentRestService vulnerableBomComponentRestService = dataServicesFactory
				.getVulnerableBomComponentRestService();
		List<VulnerableBomComponentItem> vulnerableBomComponentItems;
		try {
			vulnerableBomComponentItems = vulnerableBomComponentRestService
					.getVulnerableComponentsMatchingComponentName(projectId, projectVersionId, componentName);
		} catch (IOException | URISyntaxException | BDRestException e) {
			logger.error("Error looking up component via Hub vulnerable components API. Unable to determine if this component still has vulnerabilities");
			return true;
		}

		logger.debug("vulnerableBomComponentItems.size(): " + vulnerableBomComponentItems.size());
		if (hasVersion(vulnerableBomComponentItems, vulnerabilityContentItem.getComponentVersion())) {
			logger.debug("This component still has vulnerabilities");
			return true;
		} else {
			logger.debug("This component either no longer has vulnerabilities, or is no longer in the BOM");
			return false;
		}
	}

	private boolean hasVersion(final List<VulnerableBomComponentItem> vulnerableBomComponentItems,
			String targetVersionName) {
		if (StringUtils.isEmpty(targetVersionName)) {
			targetVersionName = null;
		}
		for (final VulnerableBomComponentItem vulnerableBomComponentItem : vulnerableBomComponentItems) {
			String currentVersionName = vulnerableBomComponentItem.getComponentVersionName();
			if (StringUtils.isEmpty(currentVersionName)) {
				currentVersionName = null;
			}
			if (currentVersionName == targetVersionName) {
				return true;
			}
		}
		return false;
	}

	private HubEvent handleNotificationPerJiraProject(final VulnerabilityContentItem vulnerabilityContentItem,
			final JiraProject jiraProject, final boolean componentVersionExistsInBom)
			throws NotificationServiceException {

		final List<VulnerabilitySourceQualifiedId> addedVulnList = vulnerabilityContentItem.getAddedVulnList();
		final List<VulnerabilitySourceQualifiedId> updatedVulnList = vulnerabilityContentItem
				.getUpdatedVulnList();
		final List<VulnerabilitySourceQualifiedId> deletedVulnList = vulnerabilityContentItem
				.getDeletedVulnList();

		final boolean notificationHasOnlyDeletes = (addedVulnList == null || addedVulnList.isEmpty())
				&& (updatedVulnList == null || updatedVulnList.isEmpty())
				&& (deletedVulnList != null && !deletedVulnList.isEmpty());

		HubEventAction eventAction = HubEventAction.ADD_COMMENT;
		if (!componentVersionExistsInBom) {
			eventAction = HubEventAction.CLOSE;
		} else if (notificationHasOnlyDeletes) {
			eventAction = HubEventAction.ADD_COMMENT_IF_EXISTS;
		}

		final HubEvent event = new VulnerabilityEvent(getJiraContext().getJiraUser().getName(),
				getJiraContext().getJiraUser().getKey(), jiraProject.getAssigneeUserId(), getIssueTypeId(),
				jiraProject.getProjectId(), jiraProject.getProjectName(), vulnerabilityContentItem,
				eventAction);

		return event;
	}
}
